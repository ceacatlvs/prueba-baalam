<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  	<modelVersion>4.0.0</modelVersion>
  
  	<groupId>com.baalam</groupId>
  	<artifactId>baalampakal</artifactId>
  
  	<version>1.0</version>
	<packaging>war</packaging>
	<name>Consultorio Medico</name>
	<description>Tu consultorio medico en la nube</description>

	<repositories>
		<repository>
			<id>prime-repo</id>
			<name>Prime Repo</name>
			<url>http://repository.primefaces.org</url>
		</repository>
		
		<repository>
    		<id>java.net2</id>
    		<name>Repository hosting the jee6 artifacts</name>
    		<url>http://download.java.net/maven/2</url>
  		</repository>
	</repositories>

  	<properties>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    	<maven.compiler.source>1.6</maven.compiler.source>
    	<maven.compiler.target>1.6</maven.compiler.target>
    	<javaee6.with.tools.version>1.0.0.M1</javaee6.with.tools.version>
  	</properties>
  	
  	<dependencyManagement>
		<dependencies>
        <!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
        	of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
			of artifacts. We use this here so that we always get the correct versions 
			of artifacts. Here we use the jboss-javaee-6.0-with tools stack (you can read this as 
			the JBoss stack of the Java EE 6 APIs, with some extras tools for your project, such
			as Arquillian for testing) -->
			
			<dependency>
				<groupId>org.jboss.bom</groupId>
            	<artifactId>jboss-javaee-6.0-with-tools</artifactId>
            	<version>${javaee6.with.tools.version}</version>
            	<type>pom</type>
            	<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<!-- First declare the APIs we depend on and need for compilation. 
			All of them are provided by JBoss AS 7 -->

      	<!-- Import the CDI API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		
		<!-- PrimeFaces -->
		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>4.0</version>
		</dependency>
		
		<dependency>
			<groupId>org.primefaces.themes</groupId>
			<artifactId>redmond</artifactId>
			<version>1.0.10</version>
		</dependency>
		
	    <dependency>
			<groupId>org.primefaces.extensions</groupId>
			<artifactId>primefaces-extensions</artifactId>
			<version>2.0.0</version>
		</dependency>
      
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>
      
		<dependency>
        	<groupId>javax.transaction</groupId>
        	<artifactId>transaction-api</artifactId>
        	<version>1.1</version>
		</dependency>
		
		<!-- CODI -->
		<dependency>
    		<groupId>org.apache.myfaces.extensions.cdi.core</groupId>
    		<artifactId>myfaces-extcdi-core-api</artifactId>
    		<version>1.0.5</version>
    		<scope>compile</scope>
		</dependency>

		<dependency>
    		<groupId>org.apache.myfaces.extensions.cdi.core</groupId>
    		<artifactId>myfaces-extcdi-core-impl</artifactId>
    		<version>1.0.5</version>
    		<scope>runtime</scope>
		</dependency>
		
		<dependency>
    		<groupId>org.apache.myfaces.extensions.cdi.modules</groupId>
    		<artifactId>myfaces-extcdi-jsf20-module-api</artifactId>
    		<version>1.0.5</version>
    		<scope>compile</scope>
		</dependency>

		<dependency>
    		<groupId>org.apache.myfaces.extensions.cdi.modules</groupId>
    		<artifactId>myfaces-extcdi-jsf20-module-impl</artifactId>
    		<version>1.0.5</version>
    		<scope>runtime</scope>
		</dependency>
		
		<dependency>
		    <groupId>org.apache.myfaces.extensions.cdi.modules</groupId>
		    <artifactId>myfaces-extcdi-scripting-module-api</artifactId>
		    <version>1.0.5</version>
		    <scope>compile</scope>
		</dependency>
		
		<dependency>
		    <groupId>org.apache.myfaces.extensions.cdi.modules</groupId>
		    <artifactId>myfaces-extcdi-scripting-module-impl</artifactId>
		    <version>1.0.5</version>
		    <scope>runtime</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope 
			as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
         	<groupId>org.jboss.spec.javax.ejb</groupId>
         	<artifactId>jboss-ejb-api_3.1_spec</artifactId>
         	<scope>provided</scope>
      	</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
      	<!-- Provides portable constraints such as @Email -->
      	<!-- Hibernate Validator is shipped in JBoss AS 7 -->
      	<dependency>
         	<groupId>org.hibernate</groupId>
         	<artifactId>hibernate-validator</artifactId>
        	<version>4.2.0.Final</version>
         	<scope>provided</scope>
         	<exclusions>
            	<exclusion>
               		<groupId>org.slf4j</groupId>
               		<artifactId>slf4j-api</artifactId>
       			</exclusion>
         	</exclusions>
      	</dependency>

      	<!-- Import the JSF API, we use provided scope as the API is included
         	in JBoss AS 7 -->
      	 <dependency>
         	<groupId>org.jboss.spec.javax.faces</groupId>
         	<artifactId>jboss-jsf-api_2.0_spec</artifactId>
         	<scope>provided</scope>
      	</dependency>

      	<!-- Now we declare any tools needed -->
      	<!-- Annotation processor to generate the JPA 2.0 metamodel classes 
			for typesafe criteria queries -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>1.1.1.Final</version>
			<scope>provided</scope>
		</dependency>
      
      	<dependency>
    		<groupId>javax</groupId>
    		<artifactId>javaee-web-api</artifactId>
    		<version>6.0</version>
    		<scope>provided</scope>
  		</dependency>
	</dependencies>
  
  	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
      	<finalName>${project.artifactId}</finalName>
      	<plugins>
        	<!-- Compiler plugin enforces Java 1.6 compatibility and activates 
            	annotation processors -->
         	<plugin>
            	<artifactId>maven-compiler-plugin</artifactId>
            	<version>2.3.1</version>
            	<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<compilerArguments>
						<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
        			</compilerArguments>
				</configuration>
         	</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
            	<configuration>
				<!-- Java EE 6 doesn't require web.xml, Maven needs to catch 
					up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
            	</configuration>
			</plugin>
		
			<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
            	<version>7.1.0.Final</version>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
		<!-- The default profile skips all tests, though you can tune it 
			to run just unit tests based on a custom pattern -->
		<!-- Seperate profiles are provided for running all tests, including 
			Arquillian tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
            	<plugins>
               		<plugin>
                  		<artifactId>maven-surefire-plugin</artifactId>
                  		<version>2.4.3</version>
                  		<configuration>
                     		<skip>true</skip>
                  		</configuration>
               		</plugin>
            	</plugins>
         	</build>
      	</profile>

		<profile>
         	<!-- When built in OpenShift the 'openshift' profile will be used when invoking mvn. -->
         	<!-- Use this profile for any OpenShift specific customization your app will need. -->
         	<!-- By default that is to put the resulting archive into the 'deployments' folder. -->
         	<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
         	<id>openshift</id>
         	<build>
            	<plugins>
               		<plugin>
                  		<artifactId>maven-war-plugin</artifactId>
                  		<version>2.1.1</version>
                  		<configuration>
                     		<outputDirectory>deployments</outputDirectory>
                     		<warName>ROOT</warName>
                  		</configuration>
               		</plugin>
            	</plugins>
         	</build>
      	</profile>
	</profiles>
	
</project>